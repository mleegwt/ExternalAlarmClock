// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.9.20'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.15.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
plugins {
    id 'base'
    id "org.owasp.dependencycheck" version "8.4.2"
    id 'org.sonarqube' version "4.4.1.3373"
    id 'jacoco'
    id "com.github.ben-manes.versions" version "0.50.0"
}
sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
        property "sonar.pitest.mode", "reuseReport"
    }
}

allprojects {
    repositories {
        mavenCentral()
    }

    jacoco {
        toolVersion = "0.8.11"
        reportsDirectory = file("${buildDir}/reports/jacoco")
    }
}

configure(javaProjects()) {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: "info.solidsoft.pitest"
    apply plugin: "jacoco"

    eclipse {
        classpath {
            //customizing the classes output directory:
            defaultOutputDir = file('build-eclipse')

            //default settings for downloading sources and Javadoc:
            downloadSources = true
            downloadJavadoc = false
        }
    }

    def jacocoExecutionDataFiles = fileTree(buildDir).include("/jacoco/*.exec")
    jacocoTestReport {
        executionData.from = jacocoExecutionDataFiles
    }

    pitest {
        targetClasses = ['com.*']
        pitestVersion = "1.4.10" //not needed when a default PIT version should be used
        threads = 4
        outputFormats = ['XML', 'HTML']
        failWhenNoMutations = false
    }
    
    test {
        useJUnitPlatform()
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

        testImplementation 'com.openpojo:openpojo:0.9.1'
        testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
        testImplementation 'org.mockito:mockito-junit-jupiter:5.6.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.1'
    }
}

def javaProjects() {
    subprojects - rootProject() - appProjects()
}

def rootProject() {
    [project]
}

def appProjects() {
    subprojects.findAll { it.name.endsWith('app') }
}

task jacocoRootReport(type: JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'

    additionalSourceDirs.from = files(javaProjects()*.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(javaProjects()*.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(javaProjects()*.sourceSets.main.output)
    executionData.from = files(javaProjects()*.jacocoTestReport.executionData)
    
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled true          
        html.destination file("${buildDir}/reports/jacoco/report.html")
        csv.enabled false
    }
}

apply plugin: "com.github.ben-manes.versions"
dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

check.dependsOn dependencyUpdates
check.dependsOn jacocoRootReport
jacocoRootReport.dependsOn javaProjects()*.jacocoTestReport

